{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/mysql-index","result":{"data":{"markdownRemark":{"id":"a1d939c4-d698-5e87-8bf3-cd26612549b8","html":"<h1 id=\"hash-table\" style=\"position:relative;\"><a href=\"#hash-table\" aria-label=\"hash table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hash Table</h1>\n<p>Key에 Value를 저장하는 데이터 구조</p>\n<ul>\n<li>Key를 통해 데이터를 바로 받아올 수 있으므로 속도가 획기적으로 빨라진다.</li>\n<li>Python Dictionary = Hash Table</li>\n<li>\n<p>보통 배열로 미리 Hash Table의 사이즈만큼 생성후 사용 (공간과 탐색시간을 맞바꾸는 기법)</p>\n<ul>\n<li>해시테이블 공간을 늘림으로써 충돌로인한 추가적인 자료구조 알고리즘을 실행하지 않도록 만든다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"용어\" style=\"position:relative;\"><a href=\"#%EC%9A%A9%EC%96%B4\" aria-label=\"용어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>용어</h2>\n<ul>\n<li>Hash: 임의의 값을 고정길이로 변환하는 것</li>\n<li>Hash Table: 키값의 연산에 의해 직접 접근이 가능한 데이터 구조</li>\n<li>Hash Function: Key에 대해 산술 연산을 이용해 데이터 위치를 찾을 수 있는 함수</li>\n<li>Hash Value (Hash Address): Key를 해싱 함수로 연산해서 해쉬 값을 알아내고, 해쉬 테이블에서 해당 Key에 대한 데이터 위치를 일관성있게 찾을 수 있음</li>\n<li>Slot: 한 개의 데이터를 저장할 수 있는 공간</li>\n<li>저장할 데이터에 대해 Key를 추출할 수 있는 별도의 함수도 존재할 수 있음</li>\n</ul>\n<h2 id=\"장점\" style=\"position:relative;\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<ul>\n<li>데이터 저장/읽기 속도가 빠르다.(검색 속도가 빠르다)</li>\n<li>Hash는 Key에 대한 데이터가 있는지 중복 확인이 쉽다.</li>\n</ul>\n<h2 id=\"단점\" style=\"position:relative;\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<ul>\n<li>일반적으로 저장공간이 좀더 많이 필요하다.</li>\n<li>\n<p><strong>여러키에 해당하는 주소가 동일할 경우 충돌을 해결하기 위한 별도 자료구조가 필요하다.</strong></p>\n<ul>\n<li>충돌 문제가 있기 때문에 저장공간을 충분하게 확보하는 경우가 있다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"주요-용도\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9A%94-%EC%9A%A9%EB%8F%84\" aria-label=\"주요 용도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주요 용도</h2>\n<ul>\n<li>검색이 많이 필요한 경우</li>\n<li>\n<p>저장, 삭제, 읽기가 빈번한 경우</p>\n<ul>\n<li>배열의 경우 데이터를 일일이 찾아가야하는 문제가 있어서 비효율적이기 때문이다.</li>\n</ul>\n</li>\n<li>캐시 구현시 (중복 확인이 쉽기 때문)</li>\n</ul>","fields":{"slug":"/posts/mysql-index","tagSlugs":["/tag/database/","/tag/mysql/","/tag/index/"]},"frontmatter":{"date":"2020-08-10T16:09:32.169Z","description":"Index란?","tags":["database","mysql","index"],"title":"MySQL Index","socialImage":"https://i.kym-cdn.com/entries/icons/facebook/000/019/513/til.jpg"}}},"pageContext":{"slug":"/posts/mysql-index"}}}