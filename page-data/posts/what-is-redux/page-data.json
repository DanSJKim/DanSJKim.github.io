{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/what-is-redux","result":{"data":{"markdownRemark":{"id":"7193b03b-c31f-5c5f-9979-46afbe79c2eb","html":"<p><img src=\"https://raw.githubusercontent.com/reduxjs/redux/master/logo/logo-title-dark.png\"></p>\n<h1 id=\"redux란\" style=\"position:relative;\"><a href=\"#redux%EB%9E%80\" aria-label=\"redux란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux란?</h1>\n<p><img src=\"https://hackernoon.com/hn-images/1*87dJ5EB3ydD7_AbhKb4UOQ.png\">\n상태 관리 라이브러리</p>\n<p>컴포넌트간에 state를 넘나들기 힘들어서 사용한다.</p>\n<h1 id=\"data-flow\" style=\"position:relative;\"><a href=\"#data-flow\" aria-label=\"data flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Data flow</h1>\n<p><img src=\"https://yeri-kim.github.io/media/190715.png\"></p>\n<ul>\n<li>\n<p>Action</p>\n<ul>\n<li>업데이트해야될 때 어떻게 업데이트할 지 정의하는 객체</li>\n<li>action은 state 변화를 일으킬 수 있는 하나의 현상이다.\naction을 dispatch(발행)해서 store에 저장하고, state가 변경되면 view에서 감지하게 된다.</li>\n<li>action은 사용자가 일으키는 이벤트라고 생각해도 되는데, 위의 그림과 같이 view단에서 action이 일어날 수도 있다. view에서 action이 일어나면 -> 다시 dispatcher에 의해 store에 저장되고 -> state가 변경되면 -> 필요한 view에서 감지를 알아차린다.</li>\n</ul>\n</li>\n<li>\n<p>Reducer</p>\n<ul>\n<li>상태를 바꿔주는 함수- Action에 의해 State를 변경시키는 함수</li>\n</ul>\n</li>\n<li>\n<p>store</p>\n<ul>\n<li>Application의 전체 state는 store라고 불리는 곳에서 관리된다.\nstore는 redux의 상태값(state)를 갖는 객체이다.</li>\n<li>application의 전체 state를 가지고 있는 객체. app에는 단 하나의 store를 갖고 있는 것이 좋다고 한다.</li>\n</ul>\n</li>\n<li>subscribe</li>\n<li>\n<p>view</p>\n<ul>\n<li>리액트에서는 component라고 생각하면 된다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3가지-규칙\" style=\"position:relative;\"><a href=\"#3%EA%B0%80%EC%A7%80-%EA%B7%9C%EC%B9%99\" aria-label=\"3가지 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3가지 규칙</h2>\n<ol>\n<li>하나의 애플리케이션엔 하나의 스토어가 있다.</li>\n<li>state는 읽기전용 이다.</li>\n<li>예를 들어 객체가 있다면 spread 연산자를 사용해서 객체를 복사한다음에 특정 값을 덮어씌우고</li>\n<li>배열은 push, splice, reverse 쓰지 말고 concat, filter, map, slice같은 불변성을 지키는 내장함수를 사용해야 한다. 좋은 성능을 지켜내기 위함이다. 불변성을 지켜야만 컴포넌트들이 제대로 리랜더링 된다.</li>\n<li>변화를 일으키는 함수 리듀서는 순수한 함수여야 한다. 순수한 함수란 input값이 그대로 output으로 나오는 것을 말한다.</li>\n</ol>\n<p>참조 : <a href=\"https://yeri-kim.github.io/posts/redux/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">yeri-kim</a></p>\n<p>redux를 사용하기 위해 필요한 항목\nDucks 패턴\naction 생성함수 action타입 reducer를 한 파일에 몰아놓은 것</p>\n<h2 id=\"기본-예제\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%98%88%EC%A0%9C\" aria-label=\"기본 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 예제</h2>\n<p>increment 예제</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"slug":"/posts/what-is-redux","tagSlugs":["/tag/redux/","/tag/til/"]},"frontmatter":{"date":"2020-03-10T16:09:32.169Z","description":"Redux에 대해 알아보자","tags":["Redux","TIL"],"title":"What is Redux?","socialImage":"https://miro.medium.com/max/2800/0*U2DmhXYumRyXH6X1.png"}}},"pageContext":{"slug":"/posts/what-is-redux"}}}